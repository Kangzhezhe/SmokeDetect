/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.7 */

#ifndef PB_SIMPLE_PB_H_INCLUDED
#define PB_SIMPLE_PB_H_INCLUDED
#include <pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Struct definitions */
typedef struct _SimpleMessage {
    uint32_t LED_R;
    uint32_t LED_B;
    double LED_R_B;
    int32_t state;
} SimpleMessage;


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define SimpleMessage_init_default               {0, 0, 0, 0}
#define SimpleMessage_init_zero                  {0, 0, 0, 0}

/* Field tags (for use in manual encoding/decoding) */
#define SimpleMessage_LED_R_tag                  1
#define SimpleMessage_LED_B_tag                  2
#define SimpleMessage_LED_R_B_tag                3
#define SimpleMessage_state_tag                  4

/* Struct field encoding specification for nanopb */
#define SimpleMessage_FIELDLIST(X, a) \
X(a, STATIC,   REQUIRED, UINT32,   LED_R,             1) \
X(a, STATIC,   REQUIRED, UINT32,   LED_B,             2) \
X(a, STATIC,   REQUIRED, DOUBLE,   LED_R_B,           3) \
X(a, STATIC,   REQUIRED, INT32,    state,             4)
#define SimpleMessage_CALLBACK NULL
#define SimpleMessage_DEFAULT NULL

extern const pb_msgdesc_t SimpleMessage_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define SimpleMessage_fields &SimpleMessage_msg

/* Maximum encoded size of messages (where known) */
#define SimpleMessage_size                       32

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
